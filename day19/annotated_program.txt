#ip 4

; JMP init
00: addi 4 16 4  IP <- 16

compute:
01: seti 1 7 1   r1 <= 1
02: seti 1 8 2   r2 <= 1
03: mulr 1 2 3   r3 <= r1 * r2

; skip the r0 update @ 07 unless r3==r5
04: eqrr 3 5 3   r3 <= (r3 == r5)
05: addr 3 4 4   IP <= IP + r3
06: addi 4 1 4   IP <= IP + 1
07: addr 1 0 0   r0 <= r0 + r1
08: addi 2 1 2   r2 <= r2 + 1
; JMP 3 if r2 <= r5
09: gtrr 2 5 3   r3 <= (r2 > r5)
10: addr 4 3 4   IP <= IP + r3
11: seti 2 1 4   IP <= 2
12: addi 1 1 1   r1 <= r1 + 1
; HALT if r1 > r5, else JMP 2
13: gtrr 1 5 3   r3 <= (r1 > r5)
14: addr 3 4 4   IP <= IP + r3
15: seti 1 8 4   IP <= 1
16: mulr 4 4 4   IP <= IP * 4 (HALT)

init:
17: addi 5 2 5   r5 <- r5 + 2
18: mulr 5 5 5   r5 <- r5 * r5
19: mulr 4 5 5   r5 <- IP * r5 (19 * r5)
20: muli 5 11 5  r5 <- r5 * 11
21: addi 3 4 3   r3 <- r3 + 4
22: mulr 3 4 3   r3 <- r3 * IP (r3 * 22)
23: addi 3 21 3  r3 <- r3 + 21
24: addr 5 3 5   r5 <- r5 + r3
25: addr 4 0 4   IP <- IP + r0 (skip 1 instr on first execution)

; JMP compute (1)
26: seti 0 5 4   IP <- 0
27: setr 4 1 3   r3 <- 4
28: mulr 3 4 3   r3 <- r3 * IP (r3 * 28)
29: addr 4 3 3   r3 <- r3 + IP (r3 + 29)
30: mulr 4 3 3   r3 <- r3 * IP (r3 * 30)
31: muli 3 14 3  r3 <- r3 * 14
32: mulr 3 4 3   r3 <- r3 * IP (r3 * 32)
33: addr 5 3 5   r5 <- r5 + r3
34: seti 0 2 0   r0 <= 0
35: seti 0 0 4   IP <= 0
